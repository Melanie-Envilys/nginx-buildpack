#!/bin/bash

set -e
set -o pipefail
shopt -s dotglob

if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source $basedir/common.sh
source $basedir/../config/versions.sh

BUILD_DIR="$1"
CACHE_DIR="$2"
export_env_dir "$3"

VENDOR_BASE_URL="${VENDOR_URL:-https://nginx-buildpack.s3.amazonaws.com}"
STACK="${STACK:-scalingo-20}"
VENDOR_URL="${VENDOR_BASE_URL}/${STACK}"
LOG_FILES=(vendor/nginx/logs/access.log vendor/nginx/logs/error.log)

SEMVER_SERVER="https://semver.scalingo.com"
# DEFAULT_NGINX=$(curl --fail --location --silent "${SEMVER_SERVER}/nginx-${STACK}")
NGINX_VERSION=${NGINX_VERSION:-$default_nginx_version}
NJS_VERSION=${NJS_VERSION:-$default_njs_version}

mkdir -p "${CACHE_DIR}/package"
mkdir -p "${BUILD_DIR}/bin"
mkdir -p "${BUILD_DIR}/vendor"
mkdir -p "${BUILD_DIR}/.profile.d"

export PATH="$BUILD_DIR/bin:$PATH"

status "Bundling Nginx ${NGINX_VERSION}"
fetch_custom

# Download and install NJS module
status "Bundling NJS module ${NJS_VERSION}"

# More explicit URL formation
NJS_URL="https://nginx.org/packages/ubuntu/pool/nginx/n/nginx-module-njs/nginx-module-njs_${NGINX_VERSION}%2B${NJS_VERSION}-1~jammy_amd64.deb"
NJS_DEB="/tmp/nginx-module-njs.deb"

status "Downloading from URL: $NJS_URL"
# Use -v for verbose output and -L to follow redirects
curl -v -L "$NJS_URL" -o "$NJS_DEB" 2>&1 | indent

# Check if file was downloaded and has content
if [ ! -s "$NJS_DEB" ]; then
  status "ERROR: Download failed or resulted in empty file"
  status "Trying with wget as alternative"
  
  wget -v "$NJS_URL" -O "$NJS_DEB" 2>&1 | indent
  
  if [ ! -s "$NJS_DEB" ]; then
    status "ERROR: Both curl and wget failed to download the file"
    exit 1
  fi
fi

status "Download completed. File size:"
ls -lh "$NJS_DEB" | indent

status "File type check:"
file "$NJS_DEB" | indent

status "Extracting NJS module"
mkdir -p /tmp/njs-extract
dpkg -x "$NJS_DEB" /tmp/njs-extract 2>&1 | indent

if [ $? -ne 0 ]; then
  status "ERROR: Failed to extract NJS package"
  status "First 100 bytes of downloaded file:"
  head -c 100 "$NJS_DEB" | hexdump -C | indent
  exit 1
fi

status "Extracted files:"
find /tmp/njs-extract -type f | indent


mkdir -p "$BUILD_DIR/vendor/nginx/modules"
cp /tmp/njs-extract/usr/lib/nginx/modules/*.so "$BUILD_DIR/vendor/nginx/modules/" 2>&1 | indent

if [ $? -ne 0 ]; then
  status "ERROR: Failed to copy NJS module files"
  status "Contents of extracted directory:"
  find /tmp/njs-extract -type f | indent
  exit 1
fi

status "NJS module successfully installed"
rm -rf /tmp/njs-extract "$NJS_DEB"

# Create a file with just the module loading directives
cat > "$BUILD_DIR/njs_modules.conf" <<'CONF'
# Load NJS module
load_module modules/ngx_http_js_module.so;
load_module modules/ngx_stream_js_module.so;
CONF

# Create a profile script specifically for NJS - put PCRE2 paths first
cat > "$BUILD_DIR/.profile.d/njs.sh" <<SH
# NJS module configuration
export LD_LIBRARY_PATH=/app/.apt/usr/lib/x86_64-linux-gnu:/app/.apt/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH:\$HOME/vendor/nginx/modules
SH

# General nginx profile script - with PCRE2 paths first
cat > "$BUILD_DIR/.profile.d/nginx.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/app/bin:\${HOME}/vendor/nginx/sbin:\${HOME}/vendor/bin:\$PATH
export APP_BUILD_TIME=$(date +%Y%m%d%H%M%S)
export LD_LIBRARY_PATH=/app/.apt/usr/lib/x86_64-linux-gnu:/app/.apt/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH
SH

source "$BUILD_DIR/.profile.d/nginx.sh"

cp "$basedir/../config/nginx.conf.erb" "$BUILD_DIR/base_nginx.conf.erb"

cat > "$BUILD_DIR/bin/run" <<SH
#!/usr/bin/env bash

basedir="\$( cd -P "\$(dirname \$(dirname "\$0" ))" && pwd )"
pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr

# Create necessary directories at runtime
mkdir -p "$basedir/vendor/nginx/logs" /var/log/nginx 2>/dev/null


[ -f \$basedir/servers.conf.erb ] && export HAS_SERVER_CONF=true

erb base_nginx.conf.erb > "\$basedir/vendor/nginx/conf/nginx.conf.tmp"

# Insert NJS module loading directives at the beginning of nginx.conf
cat "\$basedir/njs_modules.conf" "\$basedir/vendor/nginx/conf/nginx.conf.tmp" > "\$basedir/vendor/nginx/conf/nginx.conf"

if [ -f "\$basedir/nginx.conf.erb" ] ; then
  erb "\$basedir/nginx.conf.erb" > "\$basedir/vendor/nginx/conf/site.conf"
elif [ -f \$basedir/servers.conf.erb ] ; then
  erb "\$basedir/servers.conf.erb" > "\$basedir/vendor/nginx/conf/servers.conf"
elif [ -f \$basedir/nginx.conf ] ; then
  cp "\$basedir/nginx.conf" "\$basedir/vendor/nginx/conf/site.conf"
else
  echo 'nginx.conf or nginx.conf.erb should be located at the root of the project'
  exit 1
fi

`init_log_plex ${LOG_FILES[@]}`
`tail_log_plex ${LOG_FILES[@]}`

(
    nginx -p "\$basedir/vendor/nginx" -c "\$basedir/vendor/nginx/conf/nginx.conf"
    echo "nginx" > \$pmsgr
) &

read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

chmod +x "$BUILD_DIR/bin/run"
